---
description: Frontend technology stack, versions, and best practices for the Polaris project
globs: frontend/**/*
alwaysApply: false
---

# Frontend Technology Stack

This document outlines the frontend technology stack, versions, and best practices for the Polaris project.

## Core Framework

### Vue.js 3.5.18

- **Version**: ^3.5.18 (latest stable version)
- **TypeScript Support**: Full TypeScript support with vue-tsc ^3.0.4
- **Best Practices**:
  - Use Vue 3's Composition API for better logic organization
  - Leverage Vue 3's improved performance and tree-shaking
  - Use `<script setup>` syntax for cleaner component code
  - Implement proper TypeScript interfaces for props and emits
  - Use Vue 3's Teleport and Suspense features where applicable

### Vue Router 4.5.1

- **Version**: ^4.5.1
- **TypeScript Support**: Full TypeScript support
- **Best Practices**:
  - Use typed route parameters and query strings
  - Implement proper route guards for authentication
  - Use lazy loading for route components
  - Leverage Vue Router's navigation guards

### Pinia 3.0.3

- **Version**: ^3.0.3
- **TypeScript Support**: Full TypeScript support
- **Best Practices**:
  - Use stores for global state management
  - Implement proper TypeScript interfaces for store state
  - Use actions for async operations
  - Leverage Pinia's devtools for debugging

## Build Tools

### Vite 7.0.6

- **Version**: ^7.0.6 (latest major version)
- **Plugin**: @vitejs/plugin-vue ^6.0.1
- **Best Practices**:
  - Leverage Vite's fast HMR for development
  - Use Vite's built-in TypeScript support
  - Configure proper build optimizations for production
  - Utilize Vite's environment variable handling
  - Use Vite's alias system for clean imports

### TypeScript 5.8.0

- **Version**: ~5.8.0 (latest stable)
- **Configuration**: Strict TypeScript configuration via @vue/tsconfig
- **Best Practices**:
  - Use strict mode for better type safety
  - Leverage TypeScript 5.8's new features
  - Use proper type annotations for all components
  - Implement proper interface definitions for props and emits
  - Use Vue's built-in TypeScript utilities

## Development Tools

### ESLint 9.31.0

- **Version**: ^9.31.0 (latest major version)
- **Configuration**: Modern flat config format
- **Plugins**:
  - eslint-plugin-vue: ~10.3.0
  - @vue/eslint-config-typescript: ^14.6.0
  - @vue/eslint-config-prettier: ^10.2.0
- **Best Practices**:
  - Use Vue-specific linting rules
  - Enable TypeScript-specific linting rules
  - Configure proper import sorting
  - Use Prettier integration for consistent formatting

### Prettier 3.6.2

- **Version**: 3.6.2
- **Configuration**: Integrated with ESLint
- **Best Practices**:
  - Use consistent code formatting
  - Configure Prettier to work with Vue SFC format
  - Integrate with ESLint for no conflicts

### Package Management

- **Package Manager**: pnpm
- **Lock File**: pnpm-lock.yaml
- **Best Practices**:
  - Use pnpm for faster, more efficient package management
  - Keep lock file in version control
  - Use exact versions for critical dependencies

## Development Scripts

```json
{
	"dev": "vite", // Development server with HMR
	"build": "run-p type-check \"build-only {@}\" --", // Type check + build
	"build-only": "vite build", // Build only
	"type-check": "vue-tsc --build", // TypeScript type checking
	"lint": "eslint . --fix", // Lint and auto-fix
	"preview": "vite preview", // Preview production build
	"format": "prettier --write src/" // Format code
}
```

## Vue.js Best Practices

### Component Structure

- **Single File Components (SFC)**: Use `.vue` files with proper structure
- **Script Setup**: Use `<script setup>` for cleaner component logic
- **TypeScript**: Implement proper TypeScript interfaces for props and emits
- **Composition API**: Use Composition API for better logic organization

### File Organization

```
src/
├── components/          # Reusable components
├── views/              # Route components
├── stores/             # Pinia stores
├── router/             # Vue Router configuration
├── types/              # TypeScript type definitions
├── utils/              # Utility functions
└── assets/             # Static assets
```

### Component Patterns

- **Props**: Use proper TypeScript interfaces for prop validation
- **Emits**: Define emit types for better type safety
- **Slots**: Use named slots for flexible component composition
- **Composables**: Extract reusable logic into composable functions

### State Management

- **Pinia Stores**: Use stores for global state
- **Local State**: Use `ref()` and `reactive()` for component state
- **Computed**: Use `computed()` for derived state
- **Watchers**: Use `watch()` and `watchEffect()` for side effects

## Best Practices Summary

### Performance

- Use Vue 3's improved reactivity system
- Implement proper code splitting with Vite
- Use Vue's built-in optimization features
- Implement proper TypeScript types for better tree-shaking

### Development Experience

- Leverage Vite's fast HMR
- Use strict TypeScript configuration
- Follow ESLint rules consistently
- Use pnpm for faster package management
- Use Vue DevTools for debugging

### Code Quality

- Implement proper TypeScript interfaces
- Use modern Vue 3 patterns (Composition API, `<script setup>`)
- Follow Vue SFC best practices
- Maintain consistent component architecture
- Use proper prop and emit typing

### Accessibility

- Implement proper ARIA labels
- Ensure keyboard navigation support
- Test with screen readers
- Follow Vue accessibility guidelines

## Version Compatibility Notes

- Vue 3.5 requires Node.js 18+ and modern browsers
- Vite 7 has improved performance and modern features
- TypeScript 5.8 includes latest language features
- Vue Router 4 is designed for Vue 3

## Migration Considerations

When updating dependencies:

- Check Vue 3 migration guide for breaking changes
- Review Vite 7 compatibility with existing plugins
- Verify TypeScript 5.8 feature usage
- Test Pinia store compatibility
