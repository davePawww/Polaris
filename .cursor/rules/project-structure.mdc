---

description: Project structure, important files, and directories for the Polaris project
globs: **/*
alwaysApply: false

---

# Polaris Project Structure

This document outlines the directory structure and important files in the Polaris project, which is a full-stack application with separate frontend and backend directories.

## Root Directory Structure

```
Polaris/
├── .cursor/                    # Cursor IDE configuration and rules
├── frontend/                   # Vue.js + TypeScript frontend application
├── backend/                    # NestJS + TypeScript backend application
├── README.md                   # Project overview and documentation
└── LICENSE                     # Project license
```

## Frontend Directory (`frontend/`)

### Configuration Files

- `package.json` - Frontend dependencies and scripts
- `pnpm-lock.yaml` - Locked dependency versions
- `vite.config.ts` - Vite build tool configuration
- `tsconfig.json` - TypeScript configuration
- `tsconfig.app.json` - App-specific TypeScript settings
- `tsconfig.node.json` - Node.js TypeScript settings
- `eslint.config.ts` - ESLint linting configuration
- `.prettierrc.json` - Prettier code formatting configuration
- `index.html` - Main HTML entry point
- `env.d.ts` - Vite environment type definitions

### Source Code (`src/`)

- `main.ts` - Vue.js application entry point
- `App.vue` - Main Vue.js application component
- `router/index.ts` - Vue Router configuration
- `stores/` - Pinia state management stores
- `components/` - Reusable Vue components
- `views/` - Route-specific page components
- `types/` - TypeScript type definitions
- `utils/` - Utility functions and helpers
- `assets/` - Static assets (images, styles, etc.)

#### Components (`src/components/`)

- Reusable Vue components
- Use Single File Component (SFC) format with `.vue` extension
- Implement proper TypeScript interfaces for props and emits

#### Views (`src/views/`)

- Route-specific page components
- Use for main application pages
- Implement proper routing and navigation

#### Stores (`src/stores/`)

- Pinia state management stores
- Use for global application state
- Implement proper TypeScript interfaces

#### Router (`src/router/`)

- Vue Router configuration
- Route definitions and navigation guards
- Lazy loading for route components

#### Public (`public/`)

- Static files served directly
- Favicon and other public assets

## Backend Directory (`backend/`)

### Configuration Files

- `package.json` - Backend dependencies and scripts
- `pnpm-lock.yaml` - Locked dependency versions
- `tsconfig.json` - TypeScript configuration
- `tsconfig.build.json` - Build-specific TypeScript settings
- `nest-cli.json` - NestJS CLI configuration
- `eslint.config.mjs` - ESLint configuration
- `.prettierrc` - Prettier code formatting configuration
- `.gitignore` - Git ignore patterns

### Source Code (`src/`)

- `main.ts` - Application entry point
- `app.module.ts` - Root application module
- `app.controller.ts` - Main application controller
- `app.service.ts` - Main application service
- `app.controller.spec.ts` - Controller unit tests

### Testing (`test/`)

- `app.e2e-spec.ts` - End-to-end test specifications
- `jest-e2e.json` - Jest E2E testing configuration

## Cursor Rules (`.cursor/rules/`)

- `cursor-rules.mdc` - How to add/edit Cursor rules
- `self-improvement.mdc` - Self-improvement guidelines
- `project-structure.mdc` - This file

## Key Technologies

### Frontend

- **Vue.js 3.5.18** with TypeScript
- **Vue Router 4.5.1** for client-side routing
- **Pinia 3.0.3** for state management
- **Vite 7.0.6** for build tooling
- **pnpm** for package management

### Backend

- **NestJS** framework
- **TypeScript** for type safety
- **Jest** for testing
- **ESLint + Prettier** for code quality

## Development Workflow

1. **Frontend Development**: Work in `frontend/src/` directory
2. **Backend Development**: Work in `backend/src/` directory
3. **Shared Configuration**: Update root-level files as needed
4. **Testing**: Use respective test directories in each project
5. **Package Management**: Use `pnpm` for both frontend and backend

## Important Notes

- Both frontend and backend use TypeScript with strict configurations
- ESLint and Prettier are configured for consistent code style
- Testing frameworks are set up for both unit and E2E testing
- The project follows a monorepo structure with separate package.json files
- Cursor rules are maintained in `.cursor/rules/` for development consistency
- Frontend uses Vue.js 3 with Composition API and `<script setup>` syntax
- State management is handled by Pinia stores
- Routing is managed by Vue Router 4

- Both frontend and backend use TypeScript with strict configurations
- ESLint and Prettier are configured for consistent code style
- Testing frameworks are set up for both unit and E2E testing
- The project follows a monorepo structure with separate package.json files
- Cursor rules are maintained in `.cursor/rules/` for development consistency
