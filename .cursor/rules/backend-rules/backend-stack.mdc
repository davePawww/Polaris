---
description: Backend stack, dependencies, versions, and best practices for the NestJS backend
globs: backend/**/*
alwaysApply: false
---

# Backend Stack & Dependencies

This document outlines the backend technology stack, dependency versions, and best practices for the Polaris NestJS backend application.

## Core Framework

### NestJS v11.0.1

- **Latest major version** with significant improvements over v10
- **Breaking changes** from v10 include:
  - Node.js 18+ requirement
  - TypeScript 5.0+ requirement
  - Updated decorators and metadata handling
  - Improved performance and memory usage

**Best Practices:**

- Use dependency injection consistently
- Follow NestJS architectural patterns (modules, controllers, services, guards, interceptors)
- Leverage built-in validation pipes and transformation
- Use custom decorators for reusable logic

## Runtime Dependencies

### Core NestJS Packages

```json
"@nestjs/common": "^11.0.1"      // Core NestJS functionality
"@nestjs/core": "^11.0.1"        // NestJS core framework
"@nestjs/platform-express": "^11.0.1"  // Express.js integration
```

**Best Practices:**

- Keep all NestJS packages on the same major version
- Use `^` for minor version updates within v11
- Avoid mixing NestJS v10 and v11 packages

### Supporting Libraries

```json
"reflect-metadata": "^0.2.2"     // Required for decorators
"rxjs": "^7.8.1"                // Reactive programming library
```

**Best Practices:**

- `reflect-metadata` must be imported at the very top of `main.ts`
- Use RxJS observables for async operations
- Prefer async/await over manual subscription management

## Development Dependencies

### TypeScript & Build Tools

```json
"typescript": "^5.7.3"           // Latest stable TypeScript
"@swc/cli": "^0.6.0"            // Fast TypeScript/JavaScript compiler
"@swc/core": "^1.10.7"          // SWC core compiler
"ts-loader": "^9.5.2"            // TypeScript loader for webpack
"ts-node": "^10.9.2"            // TypeScript execution engine
"tsconfig-paths": "^4.2.0"      // Path mapping support
```

**Best Practices:**

- TypeScript 5.7+ provides excellent performance improvements
- Use SWC for faster builds in development
- Configure strict TypeScript settings for better type safety
- Use path aliases for cleaner imports

### Testing Framework

```json
"jest": "^29.7.0"               // Latest Jest testing framework
"@nestjs/testing": "^11.0.1"    // NestJS testing utilities
"@types/jest": "^29.5.14"       // Jest TypeScript definitions
"ts-jest": "^29.2.5"            // TypeScript support for Jest
"supertest": "^7.0.0"           // HTTP testing library
"@types/supertest": "^6.0.2"    // Supertest TypeScript definitions
```

**Best Practices:**

- Use `@nestjs/testing` utilities for mocking and testing
- Write unit tests for services and utilities
- Use E2E tests with Supertest for API endpoints
- Maintain good test coverage (aim for 80%+)

### Code Quality Tools

```json
"eslint": "^9.18.0"             // Latest ESLint v9
"@eslint/js": "^9.18.0"         // ESLint JavaScript configuration
"@eslint/eslintrc": "^3.2.0"    // ESLint configuration compatibility
"typescript-eslint": "^8.20.0"   // TypeScript ESLint rules
"prettier": "^3.4.2"            // Code formatter
"eslint-config-prettier": "^10.0.1"  // ESLint + Prettier integration
"eslint-plugin-prettier": "^5.2.2"   // Prettier ESLint plugin
```

**Best Practices:**

- ESLint v9 is the latest major version with improved performance
- Use `typescript-eslint` v8 for TypeScript-specific rules
- Configure Prettier to run after ESLint
- Use consistent code formatting across the team

### Node.js & Express Types

```json
"@types/node": "^22.10.7"       // Node.js type definitions
"@types/express": "^5.0.0"      // Express.js type definitions
```

**Best Practices:**

- Node.js 22+ types provide latest API definitions
- Express v5 types are compatible with NestJS v11
- Use Node.js built-in modules when possible

## Version Management Strategy

### Major Version Updates

- **NestJS**: Update all `@nestjs/*` packages together
- **TypeScript**: Update after NestJS updates, test thoroughly
- **ESLint**: Update major versions carefully, review breaking changes
- **Jest**: Update with testing suite validation

### Minor Version Updates

- Use `^` for automatic minor updates
- Test thoroughly after updates
- Monitor for any breaking changes

### Patch Version Updates

- Automatically update for security patches
- Use `pnpm update` regularly

## Build & Development Scripts

### Available Scripts

```json
"build": "nest build"                    // Production build
"start": "nest start"                    // Production start
"start:dev": "nest start --watch"        // Development with hot reload
"start:debug": "nest start --debug --watch"  // Debug mode
"start:prod": "node dist/main"           // Production start from built files
```

### Testing Scripts

```json
"test": "jest"                           // Run all tests
"test:watch": "jest --watch"             // Watch mode for development
"test:cov": "jest --coverage"            // Coverage report
"test:debug": "node --inspect-brk..."    // Debug tests
"test:e2e": "jest --config ./test/jest-e2e.json"  // E2E tests
```

## Configuration Files

### TypeScript Configuration

- `tsconfig.json`: Base TypeScript configuration
- `tsconfig.build.json`: Build-specific settings
- Enable strict mode and modern features

### NestJS Configuration

- `nest-cli.json`: NestJS CLI configuration
- Configure build targets and options

### Testing Configuration

- `jest-e2e.json`: E2E testing configuration
- Jest configuration in `package.json`

## Security & Performance Considerations

### Security

- Keep dependencies updated for security patches
- Use NestJS built-in security features
- Implement proper authentication and authorization
- Validate all input data

### Performance

- Use SWC for faster builds
- Implement proper caching strategies
- Use async/await for better performance
- Monitor memory usage and optimize

## Migration Notes

### From NestJS v10

- Update Node.js to 18+
- Update TypeScript to 5.0+
- Review decorator usage
- Test all endpoints thoroughly
- Update custom guards/interceptors if needed

### Future Updates

- Monitor NestJS release notes
- Plan major version updates carefully
- Maintain comprehensive test coverage
- Document breaking changes for team

## Recommended Development Workflow

1. **Setup**: Use `pnpm install` for dependency management
2. **Development**: Use `pnpm run start:dev` for hot reload
3. **Testing**: Run `pnpm run test:watch` during development
4. **Building**: Use `pnpm run build` before deployment
5. **Quality**: Run `pnpm run lint` and `pnpm run format` before commits

## Dependencies to Consider Adding

### Production Dependencies

- `@nestjs/config` - Environment configuration
- `@nestjs/typeorm` or `@nestjs/mongoose` - Database integration
- `@nestjs/jwt` - JWT authentication
- `@nestjs/passport` - Passport integration
- `class-validator` - DTO validation
- `class-transformer` - DTO transformation

### Development Dependencies

- `@nestjs/cli` - Already included, use for code generation
- `@nestjs/schematics` - Already included, use for project scaffolding
- `nodemon` - Alternative to NestJS watch mode
- `cross-env` - Cross-platform environment variables

---

**Note**: This stack uses the latest stable versions as of 2024. Always check for security updates and breaking changes when updating major versions.
